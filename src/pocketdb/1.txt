void FillLimitsTest(const CChainParams &params)
{
    // threshold_reputation
    std::map<int, int64_t> _threshold_reputation;
    _threshold_reputation.insert({0, 100});
    Limits.insert(std::make_pair(Limit::threshold_reputation, _threshold_reputation));

    // threshold_reputation_score
    std::map<int, int64_t> _threshold_reputation_score;
    _threshold_reputation_score.insert({0, 0});
    _threshold_reputation_score.insert({100000, 100});
    Limits.insert(std::make_pair(Limit::threshold_reputation_score, _threshold_reputation_score));

    // threshold_reputation_complains
    std::map<int, int64_t> _threshold_reputation_complains;
    _threshold_reputation_complains.insert({0, 100});
    Limits.insert(std::make_pair(Limit::threshold_reputation_complains, _threshold_reputation_complains));

    // threshold_reputation_blocking
    // std::map<int, int64_t> _threshold_reputation_blocking;
    // _threshold_reputation_blocking.insert({0, 100});
    // Limits.insert(std::make_pair(Limit::threshold_reputation_blocking, _threshold_reputation_blocking));

    // threshold_balance
    std::map<int, int64_t> _threshold_balance;
    _threshold_balance.insert({0, 5 * COIN});
    Limits.insert(std::make_pair(Limit::threshold_balance, _threshold_balance));
    
    // threshold_balance_pro
    std::map<int, int64_t> _threshold_balance_pro;
    _threshold_balance_pro.insert({0, 25 * COIN});
    Limits.insert(std::make_pair(Limit::threshold_balance_pro, _threshold_balance_pro));

    // threshold_likers_count
    std::map<int, int64_t> _threshold_likers_count;
    _threshold_likers_count.insert({0, 0});
    _threshold_likers_count.insert({100000, 10});
    Limits.insert(std::make_pair(Limit::threshold_likers_count, _threshold_likers_count));

    // trial_post_limit
    std::map<int, int64_t> _trial_post_limit;
    _trial_post_limit.insert({0, 15});
    Limits.insert(std::make_pair(Limit::trial_post_limit, _trial_post_limit));

    // trial_post_edit_limit
    std::map<int, int64_t> _trial_post_edit_limit;
    _trial_post_edit_limit.insert({0, 5});
    Limits.insert(std::make_pair(Limit::trial_post_edit_limit, _trial_post_edit_limit));

    // trial_video_limit
    std::map<int, int64_t> _trial_video_limit;
    _trial_video_limit.insert({0, 15});
    Limits.insert(std::make_pair(Limit::trial_video_limit, _trial_video_limit));

    // trial_video_edit_limit
    std::map<int, int64_t> _trial_video_edit_limit;
    _trial_video_edit_limit.insert({0, 5});
    Limits.insert(std::make_pair(Limit::trial_video_edit_limit, _trial_video_edit_limit));

    // trial_score_limit
    std::map<int, int64_t> _trial_score_limit;
    _trial_score_limit.insert({0, 100});
    Limits.insert(std::make_pair(Limit::trial_score_limit, _trial_score_limit));

    // trial_complain_limit
    std::map<int, int64_t> _trial_complain_limit;
    _trial_complain_limit.insert({0, 6});
    Limits.insert(std::make_pair(Limit::trial_complain_limit, _trial_complain_limit));

    // full_post_limit
    std::map<int, int64_t> _full_post_limit;
    _full_post_limit.insert({0, 30});
    Limits.insert(std::make_pair(Limit::full_post_limit, _full_post_limit));

    // full_post_edit_limit
    std::map<int, int64_t> _full_post_edit_limit;
    _full_post_edit_limit.insert({0, 5});
    Limits.insert(std::make_pair(Limit::full_post_edit_limit, _full_post_edit_limit));

    // full_video_limit
    std::map<int, int64_t> _full_video_limit;
    _full_video_limit.insert({0, 30});
    Limits.insert(std::make_pair(Limit::full_video_limit, _full_video_limit));

    // full_video_edit_limit
    std::map<int, int64_t> _full_video_edit_limit;
    _full_video_edit_limit.insert({0, 5});
    Limits.insert(std::make_pair(Limit::full_video_edit_limit, _full_video_edit_limit));

    // full_score_limit
    std::map<int, int64_t> _full_score_limit;
    _full_score_limit.insert({0, 200});
    Limits.insert(std::make_pair(Limit::full_score_limit, _full_score_limit));

    // full_complain_limit
    std::map<int, int64_t> _full_complain_limit;
    _full_complain_limit.insert({0, 12});
    Limits.insert(std::make_pair(Limit::full_complain_limit, _full_complain_limit));

    // pro_video_limit
    std::map<int, int64_t> _pro_video_limit;
    _pro_video_limit.insert({0, 0});
    _pro_video_limit.insert({Params().GetConsensus().checkpoint_split_content_video, 100});
    Limits.insert(std::make_pair(Limit::pro_video_limit, _pro_video_limit));

    // change_info_timeout
    std::map<int, int64_t> _change_info_timeout;
    _change_info_timeout.insert({0, 30}); // blocks
    Limits.insert(std::make_pair(Limit::change_info_timeout, _change_info_timeout));

    // edit_post_timeout
    std::map<int, int64_t> _edit_post_timeout;
    _edit_post_timeout.insert({0, 1440}); // blocks
    Limits.insert(std::make_pair(Limit::edit_post_timeout, _edit_post_timeout));

    // edit_video_timeout
    std::map<int, int64_t> _edit_video_timeout;
    _edit_video_timeout.insert({0, 1440});
    Limits.insert(std::make_pair(Limit::edit_video_timeout, _edit_video_timeout));

    // max_user_size
    std::map<int, int64_t> _max_user_size;
    _max_user_size.insert({0, 2000});
    Limits.insert(std::make_pair(Limit::max_user_size, _max_user_size)); // 2Kb

    // max_post_size
    std::map<int, int64_t> _max_post_size;
    _max_post_size.insert({0, 60000});
    Limits.insert(std::make_pair(Limit::max_post_size, _max_post_size)); // 60Kb

    // bad_reputation
    std::map<int, int64_t> _bad_reputation;
    _bad_reputation.insert({0, -50});
    Limits.insert(std::make_pair(Limit::bad_reputation, _bad_reputation));

    // scores_one_to_one
    std::map<int, int64_t> _scores_one_to_one;
    _scores_one_to_one.insert({0, 2});
    Limits.insert(std::make_pair(Limit::scores_one_to_one, _scores_one_to_one));

    // scores_one_to_one_over_comment
    std::map<int, int64_t> _scores_one_to_one_over_comment;
    _scores_one_to_one_over_comment.insert({0, 20});
    Limits.insert(std::make_pair(Limit::scores_one_to_one_over_comment, _scores_one_to_one_over_comment));

    // scores_one_to_one time
    std::map<int, int64_t> _scores_one_to_one_depth;
    _scores_one_to_one_depth.insert({0, 2 * 24 * 3600});
    Limits.insert(std::make_pair(Limit::scores_one_to_one_depth, _scores_one_to_one_depth));

    // trial_comment_limit
    // std::map<int, int64_t> _trial_comment_limit;
    // _trial_comment_limit.insert({0, 150});
    // Limits.insert(std::make_pair(Limit::trial_comment_limit, _trial_comment_limit));

    // trial_comment_edit_limit
    std::map<int, int64_t> _trial_comment_edit_limit;
    _trial_comment_edit_limit.insert({0, 5});
    Limits.insert(std::make_pair(Limit::trial_comment_edit_limit, _trial_comment_edit_limit));

    // trial_comment_score_limit
    std::map<int, int64_t> _trial_comment_score_limit;
    _trial_comment_score_limit.insert({0, 300});
    Limits.insert(std::make_pair(Limit::trial_comment_score_limit, _trial_comment_score_limit));

    // full_comment_limit
    // std::map<int, int64_t> _full_comment_limit;
    // _full_comment_limit.insert({0, 300});
    // Limits.insert(std::make_pair(Limit::full_comment_limit, _full_comment_limit));

    // full_comment_edit_limit
    std::map<int, int64_t> _full_comment_edit_limit;
    _full_comment_edit_limit.insert({0, 5});
    Limits.insert(std::make_pair(Limit::full_comment_edit_limit, _full_comment_edit_limit));

    // full_comment_score_limit
    std::map<int, int64_t> _full_comment_score_limit;
    _full_comment_score_limit.insert({0, 600});
    Limits.insert(std::make_pair(Limit::full_comment_score_limit, _full_comment_score_limit));

    // comment_size_limit
    std::map<int, int64_t> _comment_size_limit;
    _comment_size_limit.insert({0, 2000});
    Limits.insert(std::make_pair(Limit::comment_size_limit, _comment_size_limit));

    // edit_comment_timeout
    std::map<int, int64_t> _edit_comment_timeout;
    _edit_comment_timeout.insert({0, 1440}); // blocks
    Limits.insert(std::make_pair(Limit::edit_comment_timeout, _edit_comment_timeout));

    // scores_depth_modify_reputation
    std::map<int, int64_t> _scores_depth_modify_reputation;
    _scores_depth_modify_reputation.insert({0, 30 * 24 * 3600});
    Limits.insert(std::make_pair(Limit::scores_depth_modify_reputation, _scores_depth_modify_reputation));

    // lottery_referral_depth
    std::map<int, int64_t> _lottery_referral_depth;
    _lottery_referral_depth.insert({0, 30 * 24 * 3600});
    Limits.insert(std::make_pair(Limit::lottery_referral_depth, _lottery_referral_depth));

};