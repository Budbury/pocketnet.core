name: Build & Deploy Release Draft

on:
  push:
    tags: v*.*.*

permissions:
  contents: read

jobs:

  Tests:
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.save_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        run: git fetch --prune --unshallow --tags

      - run: |
          ./share/genbuild.sh 1
          cat 1

  #     - name: Install dependencies
  #       run: |
  #         sudo apt update
  #         sudo apt install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils python3 libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev

  #     - name: Download dependencies archive
  #       run: curl -O https://dev.pocketnet.app/x86_64-pc-linux-gnu.bz2
  #     - name: Unpack dependencies archive
  #       run: tar xjf x86_64-pc-linux-gnu.bz2

  #     - name: Prepare source code
  #       run: ./autogen.sh

  #     - name: Configure
  #       run: CONFIG_SITE=$PWD/x86_64-pc-linux-gnu/share/config.site ./configure --enable-tests --prefix=/usr/local

  #     - name: Make
  #       run: make -j4

  #     - name: Launch tests
  #       run: make check

  #     - name: Launch benchmark
  #       run: |
  #         cd ./src/bench/
  #         ./bench_pocketcoin
  #         cd ../../

  #     - name: Save Version
  #       id: save_version
  #       run: |
  #         export VERSION=`./src/pocketcoind --version | grep 'Pocketnet Core Daemon version' | sed 's/Pocketnet Core Daemon version v//g'`
  #         echo "::set-output name=version::${VERSION}"

  # BuildUnix:
  #   needs: Tests
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v2

  #     - run: echo "${{ needs.Tests.outputs.version }}"

  #     - name: Install dependencies
  #       run: |
  #         sudo apt update
  #         sudo apt install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils python3 libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev

  #     - name: Download dependencies archive
  #       run: curl -O https://dev.pocketnet.app/x86_64-pc-linux-gnu.bz2
  #     - name: Unpack dependencies archive
  #       run: tar xjf x86_64-pc-linux-gnu.bz2

  #     - name: Prepare source code
  #       run: ./autogen.sh

  #     - name: Configure
  #       run: CONFIG_SITE=$PWD/x86_64-pc-linux-gnu/share/config.site ./configure --prefix=/usr/local

  #     - name: Make
  #       run: |
  #         make -j4
  #         make deploy
  #         mkdir ./out
  #         cp ./pocketnetcore_*_linux_x64_setup.deb ./out/pocketnetcore_${{ needs.Tests.outputs.version }}_linux_x64_setup.deb
  #         cp ./pocketnetcore_*_linux_x64.tar.gz ./out/pocketnetcore_${{ needs.Tests.outputs.version }}_linux_x64.tar.gz
  #         cp ./release/usr/local/bin/pocketcoind ./out/pocketnetcore_${{ needs.Tests.outputs.version }}_linux_x64_daemon.bin

  #     - run: ls -lhR ./out

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: unix
  #         path: ./out

  # BuildWin:
  #   needs: Tests
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v2

  #     - run: echo "${{ needs.Tests.outputs.version }}"

  #     - name: Install dependencies
  #       run: |
  #         sudo apt update
  #         sudo apt install build-essential libtool autotools-dev automake pkg-config bsdmainutils g++-mingw-w64-x86-64 nsis
  #         sudo update-alternatives --install /usr/bin/x86_64-w64-mingw32-g++ x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix 90

  #     - name: Download dependencies archive
  #       run: curl -O https://dev.pocketnet.app/x86_64-w64-mingw32.bz2
  #     - name: Unpack dependencies archive
  #       run: tar xjf x86_64-w64-mingw32.bz2

  #     - name: Prepare source code
  #       run: ./autogen.sh

  #     - name: Configure
  #       run: CONFIG_SITE=$PWD/x86_64-w64-mingw32/share/config.site ./configure CPPFLAGS='-D_MSC_VER_CROSS' --prefix=/

  #     - name: Make
  #       run: |
  #         make -j4
  #         make deploy
  #         mkdir ./out
  #         cp ./pocketnetcore_*_win_x64_setup.exe ./out/pocketnetcore_${{ needs.Tests.outputs.version }}_win_x64_setup.exe
  #         cp ./release/pocketcoind.exe ./out/pocketnetcore_${{ needs.Tests.outputs.version }}_win_x64_daemon.bin

  #     - run: ls -lhR ./release

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: win
  #         path: ./out

  # ReleaseDraft:
  #   needs: build
  #   permissions:
  #     contents: write
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Create Release
  #       id: create_release
  #       uses: release-drafter/release-drafter@v5
  #       with:
  #         prerelease: true
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.release_token }}
  #     - name: 

    # - name: Download artifact
    #     uses: actions/download-artifact@v3
    #     with:
    #       name: bastyon.tgz
    #   - name: Unpack artifact
    #     run: tar xzf bastyon.tgz -C /data/gui/ --no-same-owner